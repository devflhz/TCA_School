@using WebApp.Services;
@using Newtonsoft.Json;
@inject AddressService AddressService
@inject StudentService StudentService
@inject PhoneService PhoneService
@inject EmailService EmailService

<form>
    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="first_name">First Name</label>
            <input type="text" class="form-control" id="first_name" placeholder="First Name" @bind="Student.FirstName" @bind:event="oninput" required>
        </div>
        <div class="form-group col-md-4">
            <label for="middle_name">Middle Name</label>
            <input type="text" class="form-control" id="middle_name" placeholder="Middle Name" @bind="Student.MiddleName" @bind:event="oninput">
        </div>
        <div class="form-group col-md-4">
            <label for="last_name">Last Name</label>
            <input type="text" class="form-control" id="last_name" placeholder="Last Name" @bind="Student.LastName" @bind:event="oninput" required>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col">
            <label for="inputAddress">Address</label>
            <input type="text" class="form-control" id="inputAddress" placeholder="Address Line" @bind="address.AddressLine" @bind:event="oninput" required>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col">
            <label for="inputAddress">Email</label>
            <input type="text" class="form-control" id="Email" placeholder="Email" @bind="email.Email1" @bind:event="oninput" required>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="phone">Phone</label>
            <input type="text" class="form-control" id="phone" placeholder="Phone Number" @bind="phone.Phone1" @bind:event="oninput" required>
        </div>
        <div class="form-group col-md-6">
            <label for="phone">Genero</label>
            <select @bind="Student.Gender" id="inputState" class="form-control" required>
                <option selected>Choose...</option>
                @foreach (var gender in genders)
                {
                    <option value="@gender">@gender</option>
                }
            </select>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="inputCity">City</label>
            <input type="text" class="form-control" id="inputCity" @bind="address.City" @bind:event="oninput" required>
        </div>
        <div class="form-group col-md-4">
            <label for="inputState">State</label>
            <select @bind="address.State" id="inputState" class="form-control" required>
                <option selected>Choose...</option>
                @foreach (var state in states)
                {
                    <option value="@state.Name">@state.Name</option>
                }
            </select>
        </div>
        <div class="form-group col-md-2">
            <label for="inputZip">Zip</label>
            <input type="text" class="form-control" id="inputZip" placeholder="Zip Code" @bind="address.ZipPostcode" @bind:event="oninput" required>
        </div>
    </div>
    <button type="submit" class="btn btn-primary" @onclick="Save">Save</button>
    <p>@error</p>
</form>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public Student Student { get; set; }
    private Address address = new Address();
    private Phone phone = new Phone();
    private Email email = new Email();
    private string error;
    private List<State> states = new List<State>();
    private List<string> genders = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var statesResult = await AddressService.GetStatesAsync();
        var gendersResult = await StudentService.GetGendersAsync();
        if (gendersResult.IsSuccess)
            genders = gendersResult.Value;
        if (statesResult.IsSuccess)
            states = statesResult.Value;
    }

    async void Save()
    {
        Student studentPosted = new Student();
        var studentResult = await StudentService.PostStudentAsync(Student);
        if (studentResult.IsSuccess)
            studentPosted = JsonConvert.DeserializeObject<Student>(studentResult.Value);
        var emailResult = await EmailService.PostEmailAsync(studentPosted.StudentId, email);
        var addressResult = await AddressService.PostAddressAsync(studentPosted.StudentId, address);
        var phoneResult = await PhoneService.PostPhoneAsync(studentPosted.StudentId, phone);
        if (phoneResult.IsFailed || emailResult.IsFailed || studentResult.IsFailed || addressResult.IsFailed)
            error = "Couldn't post";
    }

    void Close()
    {
        ModalInstance.CloseAsync();
    }
}
