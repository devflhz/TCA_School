@using WebApp.Services;
@using Newtonsoft.Json;
@using Data.Constants;
@inject AddressService AddressService
@inject StudentService StudentService
@inject PhoneService PhoneService
@inject EmailService EmailService
@inject ValidationService ValidationService
@inject NavigationManager uriHelper

<div class="row">
    <div class="col-6">
        <div class="form-row">
            <div class="form-group col">
                <div class="card">
                    <div class="card-header">
                        Student
                    </div>
                    <div class="card-body">
                        <div class="form-row">
                            <div class="form-group col-4">
                                <label for="first_name">First Name</label>
                                <Validation Validator="@ValidationService.ValidateText">
                                    <TextEdit Placeholder="Enter first name" @bind-Text="Student.FirstName" class="form-control float-right" required>
                                        <Feedback>
                                            <ValidationNone>Please enter the first name.</ValidationNone>
                                            <ValidationSuccess>First name is good.</ValidationSuccess>
                                            <ValidationError>Enter valid first name (only letters)!</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </Validation>
                            </div>
                            <div class="form-group col-4">
                                <label for="middle_name">Middle Name</label>
                                <Validation Validator="@ValidationService.ValidateText">
                                    <TextEdit Placeholder="Enter middle name" @bind-Text="Student.MiddleName" class="form-control float-right" required>
                                        <Feedback>
                                            <ValidationNone>Please enter the middle name.</ValidationNone>
                                            <ValidationSuccess>Middle name is good.</ValidationSuccess>
                                            <ValidationError>Enter valid middle name (only letters)!</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </Validation>
                            </div>
                            <div class="form-group col-4">
                                <label for="last_name">Last Name</label>
                                <Validation Validator="@ValidationService.ValidateText">
                                    <TextEdit Placeholder="Enter first name" @bind-Text="Student.LastName" class="form-control float-right" required>
                                        <Feedback>
                                            <ValidationNone>Please enter the last name.</ValidationNone>
                                            <ValidationSuccess>Last name is good.</ValidationSuccess>
                                            <ValidationError>Enter valid last name (only letters)!</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </Validation>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col">
                <div class="card">
                    <div class="card-header">
                        Emails
                        <div class="row">
                            <div class="col-10">
                                <Validation Validator="@ValidationService.ValidateEmail">
                                    <TextEdit Placeholder="Enter email" @bind-Text="newEmail.Email1" class="form-control float-right" required>
                                        <Feedback>
                                            <ValidationNone>Please enter the email.</ValidationNone>
                                            <ValidationSuccess>Email is good.</ValidationSuccess>
                                            <ValidationError>Enter valid email!</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </Validation>
                            </div>
                            <div class="col-2">
                                <button class="btn btn-primary float-right" @onclick="() => AddEmail(newEmail)">Add</button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        @foreach (var email in Emails)
                        {
                            <div class="form-row">
                                @if (Emails.Count > 1)
                                {
                                    <div class="form-group col-11">
                                        <Validation Validator="@ValidationService.ValidateEmail">
                                            <TextEdit Placeholder="Enter email" @bind-Text="email.Email1" class="form-control" required>
                                                <Feedback>
                                                    <ValidationNone>Please enter the email.</ValidationNone>
                                                    <ValidationSuccess>Email is good.</ValidationSuccess>
                                                    <ValidationError>Enter valid email!</ValidationError>
                                                </Feedback>
                                            </TextEdit>
                                        </Validation>
                                    </div>
                                    <div class="form-group col-1">
                                        <button class="btn btn-danger" @onclick="() => DeleteEmail(email)">🗑️</button>
                                    </div>
                                }
                                else
                                {
                                    <div class="form-group col">
                                        <Validation Validator="@ValidationService.ValidateEmail">
                                            <TextEdit Placeholder="Enter email" @bind-Text="email.Email1" class="form-control" required>
                                                <Feedback>
                                                    <ValidationNone>Please enter the email.</ValidationNone>
                                                    <ValidationSuccess>Email is good.</ValidationSuccess>
                                                    <ValidationError>Enter valid email!</ValidationError>
                                                </Feedback>
                                            </TextEdit>
                                        </Validation>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-6">
        <div class="form-row">
            <div class="form-group col-md-6">
                <div class="card">
                    <div class="card-header">
                        Phones
                        <div class="row">
                            <div class="col-10">
                                <Validation Validator="@ValidationService.ValidatePhone">
                                    <TextEdit Placeholder="Enter phone number" @bind-Text="newPhone.Phone1" class="form-control float-right" required>
                                        <Feedback>
                                            <ValidationNone>Please enter the phone number.</ValidationNone>
                                            <ValidationSuccess>Phone number is good.</ValidationSuccess>
                                            <ValidationError>Enter valid phone number!</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </Validation>
                            </div>
                            <div class="col-2"><button class="btn btn-primary float-right" @onclick="() => AddPhone(newPhone)">Add</button></div>
                        </div>
                    </div>
                    <div class="card-body">
                        @foreach (var phone in Phones)
                        {
                            <div class="form-row">
                                @if (Phones.Count > 1)
                                {
                                    <div class="form-group col-10">
                                        <Validation Validator="@ValidationService.ValidatePhone">
                                            <TextEdit Placeholder="Enter phone number" @bind-Text="phone.Phone1" class="form-control" required>
                                                <Feedback>
                                                    <ValidationNone>Please enter the phone number.</ValidationNone>
                                                    <ValidationSuccess>Phone number is good.</ValidationSuccess>
                                                    <ValidationError>Enter valid phone number!</ValidationError>
                                                </Feedback>
                                            </TextEdit>
                                        </Validation>
                                    </div>
                                    <div class="form-group col-2">
                                        <button class="btn btn-danger" @onclick="() => DeletePhone(phone)">🗑️</button>
                                    </div>
                                }
                                else
                                {
                                    <div class="form-group col">
                                        <Validation Validator="@ValidationService.ValidatePhone">
                                            <TextEdit Placeholder="Enter phone number" @bind-Text="phone.Phone1" class="form-control" required>
                                                <Feedback>
                                                    <ValidationNone>Please enter the phone number.</ValidationNone>
                                                    <ValidationSuccess>Phone number is good.</ValidationSuccess>
                                                    <ValidationError>Enter valid phone number!</ValidationError>
                                                </Feedback>
                                            </TextEdit>
                                        </Validation>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="form-group col-md-6">
                <div class="card">
                    <div class="card-header">
                        Gender
                    </div>
                    <div class="card-body">
                        <select @bind="Student.Gender" id="inputState" class="form-control" required>
                            <option selected>Choose...</option>
                            @foreach (var gender in genders)
                            {
                                <option value="@gender">@gender</option>
                            }
                        </select>
                    </div>
                </div>

            </div>
        </div>
        <div class="card">
            <div class="card-header">
                Addresses
                <div class="row">
                    <div class="col-10">
                        <label for="">Add a new address.</label>
                        <Validation Validator="@ValidationService.ValidateTextNumSym">
                            <TextEdit Placeholder="Enter address line" @bind-Text="newAddress.AddressLine" class="form-control float-right" required>
                                <Feedback>
                                    <ValidationNone>Please enter the address line.</ValidationNone>
                                    <ValidationSuccess>Address line is good.</ValidationSuccess>
                                    <ValidationError>Enter valid address line!</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </Validation>
                    </div>
                    <div class="col-2">
                        <button class="btn btn-primary float-right" @onclick="() => AddAddress(newAddress)">Add</button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-4">
                        <Validation Validator="@ValidationService.ValidateText">
                            <TextEdit Placeholder="Enter city" @bind-Text="newAddress.City" class="form-control float-right" required>
                                <Feedback>
                                    <ValidationNone>Please enter the city.</ValidationNone>
                                    <ValidationSuccess>City is good.</ValidationSuccess>
                                    <ValidationError>Enter valid city!</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </Validation>
                    </div>
                    <div class="col-4">
                        <select @bind="newAddress.State" id="inputState" class="form-control" placeholder="State">
                            <option selected>Choose...</option>
                            @foreach (var state in states)
                            {
                                <option value="@state.Name">@state.Name</option>
                            }
                        </select>
                    </div>
                    <div class="col-2">
                        <Validation Validator="@ValidationService.ValidateZip">
                            <TextEdit Placeholder="Enter zip code" @bind-Text="newAddress.ZipPostcode" class="form-control float-right" required>
                                <Feedback>
                                    <ValidationNone>Please enter the zip code.</ValidationNone>
                                    <ValidationSuccess>Zip code is good.</ValidationSuccess>
                                    <ValidationError>Enter valid zip code!</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </Validation>
                    </div>
                </div>
            </div>
            <div class="card-body">
                @foreach (var address in Addresses)
                {
                    <div class="form-row">
                        @if (Addresses.Count > 1)
                        {
                            <div class="form-group col-11">
                                <Validation Validator="@ValidationService.ValidateTextNumSym">
                                    <TextEdit Placeholder="Enter address line" @bind-Text="newAddress.AddressLine" class="form-control float-right" required>
                                        <Feedback>
                                            <ValidationNone>Please enter the address line.</ValidationNone>
                                            <ValidationSuccess>Address line is good.</ValidationSuccess>
                                            <ValidationError>Enter valid address line!</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </Validation>
                            </div>
                            <div class="form-group col-1">
                                <button class="btn btn-danger" @onclick="() => DeleteAddress(address)">🗑️</button>
                            </div>
                        }
                        else
                        {
                            <div class="form-group col">
                                <Validation Validator="@ValidationService.ValidateTextNumSym">
                                    <TextEdit Placeholder="Enter address line" @bind-Text="address.AddressLine" class="form-control float-right" required>
                                        <Feedback>
                                            <ValidationNone>Please enter the address line.</ValidationNone>
                                            <ValidationSuccess>Address line is good.</ValidationSuccess>
                                            <ValidationError>Enter valid address line!</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </Validation>
                            </div>
                        }
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="inputCity">City</label>
                            <Validation Validator="@ValidationService.ValidateTextNumSym">
                                <TextEdit Placeholder="Enter city" @bind-Text="address.City" class="form-control float-right" required>
                                    <Feedback>
                                        <ValidationNone>Please enter the city.</ValidationNone>
                                        <ValidationSuccess>City is good.</ValidationSuccess>
                                        <ValidationError>Enter valid city!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </div>
                        <div class="form-group col-md-4">
                            <label for="inputState">State</label>
                            <select @bind="address.State" id="inputState" class="form-control" required>
                                <option selected>Choose...</option>
                                @foreach (var state in states)
                                {
                                    <option value="@state.Name">@state.Name</option>
                                }
                            </select>
                        </div>
                        <div class="form-group col-md-2">
                            <label for="inputZip">Zip</label>
                            <Validation Validator="@ValidationService.ValidateZip">
                                <TextEdit Placeholder="Enter zip code" @bind-Text="address.ZipPostcode" class="form-control float-right" required>
                                    <Feedback>
                                        <ValidationNone>Please enter the zip code.</ValidationNone>
                                        <ValidationSuccess>Zip code is good.</ValidationSuccess>
                                        <ValidationError>Enter valid zip code!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                            <input type="text" class="form-control" id="inputZip" placeholder="Zip Code" @bind="address.ZipPostcode" @bind:event="oninput" required>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<button type="submit" class="btn btn-primary" @onclick="Save">Save</button>
@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    private Student Student = new Student();
    public List<Address> Addresses = new List<Address>();
    public List<Phone> Phones = new List<Phone>();
    public List<Email> Emails = new List<Email>();
    private List<State> states = new List<State>();
    private List<string> genders = new List<string>();
    Email newEmail = new Email();
    Phone newPhone = new Phone();
    Address newAddress = new Address();

    protected override async Task OnInitializedAsync()
    {
        var statesResult = await AddressService.GetStatesAsync();
        var gendersResult = await StudentService.GetGendersAsync();
        if (gendersResult.IsSuccess)
            genders = gendersResult.Value;
        if (statesResult.IsSuccess)
            states = statesResult.Value;
    }

    void Close()
    {
        ModalInstance.CloseAsync();
    }

    async void Save()
    {
        var studentResult = await StudentService.PostStudentAsync(Student);
        if (studentResult.IsSuccess)
        {
            foreach (var email in Emails)
            {
                var emailResult = await EmailService.PostEmailAsync(studentResult.Value.StudentId, email);
                if (emailResult.IsFailed)
                {
                    return;
                }
            }
            foreach (var address in Addresses)
            {
                var addressResult = await AddressService.PostAddressAsync(studentResult.Value.StudentId, address);
                if (addressResult.IsFailed)
                {
                    return;
                }
            }
            foreach (var phone in Phones)
            {
                var phoneResult = await PhoneService.PostPhoneAsync(studentResult.Value.StudentId, phone);
                if (phoneResult.IsFailed)
                {
                    return;
                }
            }
        }
        StateHasChanged();
        Close();
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    void AddPhone(Phone phone)
    {
        Phones.Add(phone);
        newPhone = new Phone();
        StateHasChanged();
    }

    void AddAddress(Address address)
    {
        Addresses.Add(address);
        newAddress = new Address();
        StateHasChanged();
    }

    void AddEmail(Email email)
    {
        Emails.Add(email);
        newEmail = new Email();
        StateHasChanged();
    }

    void DeletePhone(Phone phone)
    {
        Phones.Remove(phone);
        StateHasChanged();
    }

    void DeleteAddress(Address address)
    {
        Addresses.Remove(address);
        StateHasChanged();
    }

    void DeleteEmail(Email email)
    {
        Emails.Remove(email);
        StateHasChanged();
    }
}
