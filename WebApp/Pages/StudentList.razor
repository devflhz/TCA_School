@page "/studentlist"

@using WebApp.Services;
@using Data.Models;
@using Pages.Modal;
@inject StudentService StudentService
@inject IModalService Modal

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Middle Name</th>
                <th>Last Name</th>
                <th>Gender</th>
                <th>Phone</th>
                <th>Address</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.FirstName</td>
                    <td>@student.MiddleName</td>
                    <td>@student.LastName</td>
                    <td>@student.GetGender()</td>
                    <td>
                        @foreach (var item in student.Phones.Where(a => a.StudentId == student.StudentId).Select(a => a).Take(5))
                        {
                            <a href="tel:+@item.PhoneLink">@item.Phone1</a><br />
                        }
                    </td>
                    <td>
                        @foreach (var item in student.Addresses.Where(a => a.StudentId == student.StudentId).Select(a => a).Take(5))
                        {
                            <p>@item.FormattedAddress</p>
                        }
                    </td>
                    <td>
                        <button class="btn btn-outline-primary" @onclick="@(() => Modal.Show<EditModal>("Edit"))">Edit</button>
                        <button class="btn btn-outline-danger" @onclick="@(() => Modal.Show<DeleteModal>("Delete"))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private List<Student> students;

    protected override async Task OnInitializedAsync()
    {
        students = await StudentService.GetStudentsAsync();
    }
}
